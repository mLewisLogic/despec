[tools]
age = "latest"
biome = "latest"
bun = "latest"
go = "latest"
golangci-lint = "latest"
lefthook = "latest"
markdownlint-cli2 = "latest"
shellcheck = "latest"
shfmt = "latest"
sops = "latest"
taplo = "latest"
usage = "latest"

[settings]
jobs = 24

[env]
APP_NAME = "xdd"

# =============================================================================
# Development
# =============================================================================

[tasks.bun]
run = "bun"
description = "Run Bun"

# =============================================================================
# Installation & Setup
# =============================================================================

[tasks.install]
description = "Install dependencies"
run = "bun install"

[tasks.setup]
description = "Initial project setup"
depends = ["install", "secrets:init"]
run = "echo '✅ Setup complete!'"

# =============================================================================
# Linting - Go
# =============================================================================
[tasks."go:format:nofix"]
run = "golangci-lint fmt --diff-colored"
dir = "backend"
description = "Check Go code formatting"

[tasks."go:format:fix"]
run = "golangci-lint fmt"
dir = "backend"
description = "Format Go code"

[tasks."go:lint:nofix"]
run = "golangci-lint run"
dir = "backend"
description = "Lint Go code"

[tasks."go:lint:fix"]
run = "golangci-lint run --fix"
dir = "backend"
description = "Lint and fix Go code"

# =============================================================================
# Linting - TypeScript
# =============================================================================

[tasks."typescript:typecheck"]
run = "bun x tsc --noEmit"
description = "Run TypeScript type checking"

# =============================================================================
# Linting - TypeScript / JSON (Biome)
# =============================================================================
[tasks."biome:lint:nofix"]
run = "biome check"
description = "Lint TypeScript and JSON files"

[tasks."biome:lint:fix"]
run = "biome check --fix"
description = "Lint and fix TypeScript and JSON files"

# =============================================================================
# Linting - Markdown
# =============================================================================

[tasks."markdown:lint:nofix"]
run = "markdownlint-cli2 '**/*.md'"
description = "Lint Markdown files"

[tasks."markdown:lint:fix"]
run = "markdownlint-cli2 '**/*.md' --fix"
description = "Lint and fix Markdown files"

# =============================================================================
# Linting - TOML
# =============================================================================

[tasks."toml:lint:nofix"]
run = "taplo format --check && taplo lint"
description = "Check TOML formatting and validate"

[tasks."toml:lint:fix"]
run = "taplo format"
description = "Format TOML files"


# =============================================================================
# Linting - Shell Scripts
# =============================================================================

[tasks."shell:lint:nofix"]
run = "./scripts/shell-lint.sh --check"
description = "Check shell files (without fixing)"

[tasks."shell:lint:fix"]
run = "./scripts/shell-lint.sh"
description = "Format and lint shell files"


# =============================================================================
# Comprehensive Linting
# =============================================================================

[tasks."lint:all:nofix"]
depends = [
  "typescript:typecheck",
  "biome:lint:nofix",
  "markdown:lint:nofix",
  "toml:lint:nofix",
  "shell:lint:nofix",
  "go:format:nofix",
  "go:lint:nofix",
]
description = "Run all linters (check only, no fixes)"
run = "echo '✅ All linting checks passed!'"

[tasks."lint:all:fix"]
depends = [
  "typescript:typecheck",
  "biome:lint:fix",
  "markdown:lint:fix",
  "toml:lint:fix",
  "shell:lint:fix",
  "go:format:fix",
  "go:lint:fix",
]
description = "Run all linters with fixes"
run = "echo '✅ All linting checks passed!'"

# =============================================================================
# Testing
# =============================================================================

[tasks."test:unit"]
run = "bun test tests/unit/"
description = "Run unit tests (fast)"

[tasks."test:integration"]
run = "bun test tests/integration/"
description = "Run integration tests (slow)"

[tasks."test:full"]
run = "bun test"
description = "Run full test suite"

[tasks."test:coverage"]
run = "bun test --coverage"
description = "Generate test coverage report"

[tasks."test:ci"]
run = "bun test --reporter=verbose"
description = "Run test suite in CI mode"


# =============================================================================
# Schema Generation
# =============================================================================

[tasks.generate-schemas]
run = "bun run scripts/generate-json-schemas.ts"
description = "Generate JSON schemas from Zod"

[tasks.validate-schemas]
run = "bun run scripts/validate-schemas.ts"
description = "Validate JSON schemas against examples"

# =============================================================================
# Quality Gates
# =============================================================================

[tasks.quality-check]
depends = ["lint:all:nofix", "test", "generate-schemas", "validate-schemas"]
description = "Run all quality checks (lint, test, schemas)"
run = "echo '✨ All quality checks passed! Ready for commit.'"

# =============================================================================
# Utilities
# =============================================================================

[tasks.clean]
run = """
rm -rf dist coverage node_modules bun.lockb && \
echo '✅ Build artifacts cleaned!'
"""
description = "Clean all build artifacts"

[tasks.doctoc]
run = "bunx doctoc --notitle --stdout"
description = "Generate table of contents for markdown"

# =============================================================================
# Backend Tasks
# =============================================================================

# Testing
[tasks."go:test"]
run = "go test ./..."
dir = "backend"
description = "Run all Go tests"

[tasks."go:test:coverage"]
run = "go test -coverprofile=coverage.out ./..."
dir = "backend"
description = "Run tests with coverage"

# Building
[tasks."go:build"]
run = "go build -o ../dist/xdd ./cmd/xdd"
dir = "backend"
description = "Build CLI binary to dist/xdd"

[tasks."go:install"]
run = "go install ./cmd/xdd"
dir = "backend"
depends = ["go:build"]
description = "Install xdd CLI to GOPATH"

[tasks."go:run"]
run = "go run ./cmd/xdd"
dir = "backend"
depends = ["go:build"]
description = "Run CLI directly with go run"

# =============================================================================
# Secrets Management
# =============================================================================

[tasks."secrets"]
description = "secrets management"
run = "./scripts/secrets.sh"

[tasks."secrets:init"]
description = "Initialize secrets (creates key, .sops.yaml, and encrypted file)"
run = "./scripts/secrets.sh init"

[tasks."secrets:edit"]
description = "Edit secrets file"
run = "./scripts/secrets.sh edit"

[tasks."secrets:set"]
description = "Set a secret value (usage: mise run secrets:set KEY_NAME)"
run = "./scripts/secrets.sh set"

[tasks."secrets:get"]
description = "Get a secret value (usage: mise run secrets:get KEY_NAME)"
run = "./scripts/secrets.sh get"

[tasks."secrets:list"]
description = "List all secret keys"
run = "./scripts/secrets.sh list"

[tasks."secrets:generate-key"]
description = "Generate new age key (for key rotation)"
run = "./scripts/secrets.sh generate-key"
